`timescale 1ns / 1ps
module ALU(
 input [3:0] A1, //被乘数 a
 input [3:0] B1,//乘数 b
 input clk,
 //output [7:0] z //乘积输出 z
 output reg[15:0] HEX
);
//reg [7:0]z;
reg[7:0] S;
reg[7:0] T;
reg state;
reg [3:0]B_reg;
reg [2:0] cnt;
wire [3:0] I=0001;
wire [3:0] a=~A1+I;
wire [3:0] b=~B1+I;
wire [1:0]i={A1[3],B1[3]};
reg [3:0] A;
reg [3:0] B;
always @ (* )
begin
   case(i)
   2'b00:begin//都是正数	
      A=A1;
      B=B1;
   end
   2'b11: begin//都是负数
      A=a;
      B=b;
   end
    2'b10: begin//A是负数
    A=a;
    B=B1;
   end
     2'b01:begin//B是负数
    B=b;
    A=A1;
   end 
    endcase
end
always @(posedge clk) 
begin
		case(state)
			1'b0:begin				//initial
				B_reg <= B;
				S <= 8'b0000_0000;
				T <= {4'b0000,A};
				cnt <= 3'b000;
				state <= 1'b1;
			end
			1'b1:begin
				if(cnt <= 3'b011) begin
					if(B_reg[0]==1'b1) begin
						S <= S + T;
					end
					else begin
						S <= S;
					end
					B_reg <= B_reg>>1;
					T <= T<<1;
					cnt <= cnt + 3'b001;
				end
				else begin
					HEX <= {A,B,S};
					state <= 1'b0;
				end
				
			end				
			default:;
		endcase				
	end

endmodule

`timescale 1ns / 1ps
module bin2dec (
    input wire clk,      //时钟，频率100MHz
    input [3:0] a, //被乘数 a
    input [3:0] b,
    output reg [7:0] led_id,    
    output reg [6:0] out_led
    );
wire[15:0] n;
ALU u1(a,b,clk,n);
wire [7:0] abs;
wire [7:0] mabs={n[7:0]};
wire [7:0] flag={8{a[3]^b[3]}};           //flag用于计算补码    
//assign abs   = (mabs^flag)+flag[0];    //计算 输入n的绝对值
assign abs   = mabs;
//8位2进制对应十进制至多3位 
wire [7:0] num [0:3];               //从0到3 -> 符号位，百位，十位，个位
assign num[0] = 4'ha+flag[0];       //计算符号位，0xa：正数,0xb:负数
assign num[1] = abs / 100 % 10;     //计算百位
assign num[2] = abs / 10 % 10;      //计算十位      
assign num[3] = abs % 10;           //计算个位

reg [1:0] id=2'b00;                //id从0至3->从左到右四个数码管
parameter CNT_MAX = 99999;//设定时钟计数上限。
reg [31:0] cnt_1ms;//计数
//用100MHz时钟从0到 99999计数即为1ms
always @ (posedge clk)//时钟上升沿
    if (cnt_1ms == CNT_MAX)
        cnt_1ms <= 1'b0;
    else
        cnt_1ms <= cnt_1ms+1'b1;  

//每1ms切换一次id
always@(posedge clk )
    if(cnt_1ms == CNT_MAX - 1'b1)
        id <= id+1'b1;

//选择灯
always @ (id)
    case(id)
        4'b0000: led_id = 8'b1111_0111;   //0
        4'b0001: led_id = 8'b1111_1011;   //1
        4'b0010: led_id = 8'b1111_1101;   //2
        4'b0011: led_id = 8'b1111_1110;   //3
        default: led_id = 8'b0000_0000;  //default to 0, should not happen
    endcase                
    
 //显示数字
 always @ (id)
    case(num[id])
        4'b0000: out_led = 7'b0000001;    //0
        4'b0001: out_led = 7'b1001111;    //1
        4'b0010: out_led = 7'b0010010;    //2
        4'b0011: out_led = 7'b0000110;    //3
        4'b0100: out_led = 7'b1001100;    //4
        4'b0101: out_led = 7'b0100100;    //5
        4'b0110: out_led = 7'b0100000;    //6
        4'b0111: out_led = 7'b0001111;    //7
        4'b1000: out_led = 7'b0000000;    //8
        4'b1001: out_led = 7'b0000100;    //9
        4'b1010: out_led = 7'b1111111;    //a->不显示
        4'b1011: out_led = 7'b1111110;    //b->显示
        default: out_led = 7'b1111111;    //default to 7'b1111111, should not happen
    endcase
endmodule




set_property IOSTANDARD LVCMOS33 [get_ports a[0]]
set_property IOSTANDARD LVCMOS33 [get_ports a[1]]
set_property IOSTANDARD LVCMOS33 [get_ports a[2]]
set_property IOSTANDARD LVCMOS33 [get_ports a[3]]
set_property IOSTANDARD LVCMOS33 [get_ports b[0]]
set_property IOSTANDARD LVCMOS33 [get_ports b[1]]
set_property IOSTANDARD LVCMOS33 [get_ports b[2]]
set_property IOSTANDARD LVCMOS33 [get_ports b[3]]
set_property PACKAGE_PIN J15 [get_ports a[0]]
set_property PACKAGE_PIN L16 [get_ports a[1]]
set_property PACKAGE_PIN M13 [get_ports a[2]]
set_property PACKAGE_PIN R15 [get_ports a[3]]
set_property PACKAGE_PIN R17 [get_ports b[0]]
set_property PACKAGE_PIN T18 [get_ports b[1]]
set_property PACKAGE_PIN U18 [get_ports b[2]]
set_property PACKAGE_PIN R13 [get_ports b[3]]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[0]}]
set_property PACKAGE_PIN J17 [get_ports {led_id[0]}]
set_property PACKAGE_PIN J18 [get_ports {led_id[1]}]
set_property PACKAGE_PIN T9 [get_ports {led_id[2]}]
set_property PACKAGE_PIN J14 [get_ports {led_id[3]}]
set_property PACKAGE_PIN P14 [get_ports {led_id[4]}]
set_property PACKAGE_PIN T14 [get_ports {led_id[5]}]
set_property PACKAGE_PIN K2  [get_ports {led_id[6]}]
set_property PACKAGE_PIN U13 [get_ports {led_id[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[0]}]
set_property PACKAGE_PIN T10 [get_ports {out_led[6]}]
set_property PACKAGE_PIN R10 [get_ports {out_led[5]}]
set_property PACKAGE_PIN K16 [get_ports {out_led[4]}]
set_property PACKAGE_PIN K13 [get_ports {out_led[3]}]
set_property PACKAGE_PIN P15 [get_ports {out_led[2]}]
set_property PACKAGE_PIN T11 [get_ports {out_led[1]}]
set_property PACKAGE_PIN L18 [get_ports {out_led[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports clk]
set_property PACKAGE_PIN E3 [get_ports clk]

