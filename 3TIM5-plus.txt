module adder(
input ia, //一位加法器中的二进制加数 ia
input ib,//一位加法器中的二进制加数 ib
input cin,//从之前一位低位来的进位信号 Cin
output cout,//自身加法器向高位加法器的进位信号 Cout
output sum //一位加法器中的二进制和数 sum
);
wire sum;
wire cout;
assign sum=ia^ib^cin;
assign cout=(ia&ib)|(ib&cin)|(ia&cin);
endmodule
module full_add_sub4(
input [3:0] a,//四位有符号数补码
input [3:0] b,//四位有符号数补码
input cin,//低位来的进位信号
input operator,//决定加法还是减法
output overflow, //溢出标志
input wire clk,      //时钟，频 100MHz
output reg [7:0] led_id,    
output reg [6:0] out_led
);
wire [3:0] abs;                     //存储 输入n的绝对      
wire [3:0] flag={8{result[3]}};           //r_flag用于计算补码     
assign abs   = (result^flag)+flag[0];    //计算 输入n的绝对值 

//2进制对应十进制至  
wire [3:0] num [0:3];               //符号位，百位，十位，个位
assign num[0] = 4'ha+flag[0];       //计算符号位，0xa：正 ?,0xb:负数
assign num[1] = 4'ha+flag[0];       //计算符号位，0xa：正 ?,0xb:负数,,注意，显示两次！！
assign num[2] = abs / 10 % 10;      //计算十位      
assign num[3] = abs % 10;           //计算个位
reg [1:0] id=2'b00;                //从左到右四个数码 计数
parameter CNT_MAX = 99999;///设定时钟计数上限 
reg [31:0] cnt_1ms;//计数
//100MHz时钟  99999计数即为1ms
always @ (posedge clk)//时钟上升
    if (cnt_1ms == CNT_MAX)
        cnt_1ms <= 1'b0;
    else
        cnt_1ms <= cnt_1ms+1'b1;  

//1ms切换1次id
always@(posedge clk )
    if(cnt_1ms == CNT_MAX - 1'b1)
        id <= id+1'b1;
wire  [3:0] result;//运算结果补码形式
//assign led_id = 8'b1111_1110; // 八个比特分别控制八个led灯，0表示该灯开启
wire [3:0]temp1;
wire [3:0]temp2;
wire g;
reg overflow;
assign g=cin^~operator;//=1 加法，=0 减法
assign temp2[0]=operator?b[0]:~b[0];//根据加减法选择合适的数值
assign temp2[1]=operator?b[1]:~b[1];
assign temp2[2]=operator?b[2]:~b[2];
assign temp2[3]=operator?b[3]:~b[3];
adder i1 (a[0],temp2[0],g, temp1[1],result[0]);
adder i2 (a[1],temp2[1],temp1[1],temp1[2],result[1]);
adder i3 (a[2],temp2[2],temp1[2],temp1[3],result[2]);
adder i4 (a[3],temp2[3],temp1[3],temp1[0],result[3]);
always@(*)
overflow=temp1[0]^temp1[3];

//选择亮哪个灯
always @ (id)
    case(id)
        4'b0000: led_id = 8'b1111_1011;   //0
        4'b0001: led_id = 8'b1111_1011;   //1,这两种都是符号位亮
        4'b0010: led_id = 8'b1111_1101;   //2
        4'b0011: led_id = 8'b1111_1110;   //3
        default: led_id = 8'b0000_0000;  //default to 0, should not happen
    endcase                
    
 //显示数字
 always @ (id)
    case(num[id])
        4'b0000: out_led = 7'b0000001;    //0
        4'b0001: out_led = 7'b1001111;    //1
        4'b0010: out_led = 7'b0010010;    //2
        4'b0011: out_led = 7'b0000110;    //3
        4'b0100: out_led = 7'b1001100;    //4
        4'b0101: out_led = 7'b0100100;    //5
        4'b0110: out_led = 7'b0100000;    //6
        4'b0111: out_led = 7'b0001111;    //7
        4'b1000: out_led = 7'b0000000;    //8
        4'b1001: out_led = 7'b0000100;    //9
        4'b1010: out_led = 7'b1111111;    //a->不显
        4'b1011: out_led = 7'b1111110;    //b->显示
        default: out_led = 7'b1111111;    //default to 7'b1111111, should not happen
        endcase
endmodule






set_property IOSTANDARD LVCMOS33 [get_ports {led_id[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {led_id[0]}]
set_property PACKAGE_PIN J17 [get_ports {led_id[0]}]
set_property PACKAGE_PIN J18 [get_ports {led_id[1]}]
set_property PACKAGE_PIN T9 [get_ports {led_id[2]}]
set_property PACKAGE_PIN J14 [get_ports {led_id[3]}]
set_property PACKAGE_PIN P14 [get_ports {led_id[4]}]
set_property PACKAGE_PIN T14 [get_ports {led_id[5]}]
set_property PACKAGE_PIN K2  [get_ports {led_id[6]}]
set_property PACKAGE_PIN U13 [get_ports {led_id[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {out_led[0]}]
set_property PACKAGE_PIN T10 [get_ports {out_led[6]}]
set_property PACKAGE_PIN R10 [get_ports {out_led[5]}]
set_property PACKAGE_PIN K16 [get_ports {out_led[4]}]
set_property PACKAGE_PIN K13 [get_ports {out_led[3]}]
set_property PACKAGE_PIN P15 [get_ports {out_led[2]}]
set_property PACKAGE_PIN T11 [get_ports {out_led[1]}]
set_property PACKAGE_PIN L18 [get_ports {out_led[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {a[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {a[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {a[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {a[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {b[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {b[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {b[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {b[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports overflow]
set_property IOSTANDARD LVCMOS33 [get_ports cin]
set_property IOSTANDARD LVCMOS33 [get_ports operator]
set_property PACKAGE_PIN V10 [get_ports operator]
set_property PACKAGE_PIN U11 [get_ports cin]
set_property PACKAGE_PIN J15 [get_ports {a[0]}]
set_property PACKAGE_PIN L16 [get_ports {a[1]}]
set_property PACKAGE_PIN M13 [get_ports {a[2]}]
set_property PACKAGE_PIN R15 [get_ports {a[3]}]
set_property PACKAGE_PIN R17 [get_ports {b[0]}]
set_property PACKAGE_PIN T18 [get_ports {b[1]}]
set_property PACKAGE_PIN U18 [get_ports {b[2]}]
set_property PACKAGE_PIN R13 [get_ports {b[3]}]
set_property PACKAGE_PIN V11 [get_ports overflow]
set_property IOSTANDARD LVCMOS33 [get_ports clk]
set_property PACKAGE_PIN E3 [get_ports clk]