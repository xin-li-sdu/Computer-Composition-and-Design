//module add1(out,x,y,cin);//这一段没用，我想想语法
	input [7:0]x;
	input[7:0]y;
	input cin;
	output [7:0] out;
//
module cpu (
    input wire clk1,
    input wire clk,
    input wire [7:0] op,//op字段？
    output reg [7:0] led_id,    
    output reg [6:0] out_led,//?
 output reg ZF,//0 标志位, 运算结果为 0(全零)则置 1, 否则置 0
 reg CF, //进借位标志位,
 reg OF, //溢出标志位
 reg SF, //符号标志位，与 F 的最高位相同
 reg PF //奇偶标志位，F 有奇数个 1，则 PF=1，否则为 0
    );
reg [7:0] n;
wire [7:0]pp,p1,p2;
reg [7:0] mymem[2:0];//声明3个8位的存储单元
wire [7:0] s3;
always@(posedge clk1)//当clk1上升沿到来时只执行一次,上升沿，电平从低到高跳变
begin
if(op[7:6]==2'b10)//存储指令
begin
    case(op[5:4])
        2'b00:mymem[2'b00]={op[3],op[3],op[3],op[3],op[3:0]};//reg0
        2'b01:mymem[2'b01]={op[3],op[3],op[3],op[3],op[3:0]};//reg1
        default mymem[2'b00]=8'b0;
    endcase
end
end
alu u0(mymem[op[3:2]],mymem[op[1:0]],op[7:4],pp);
alu u1(mymem[op[3:2]],1,4'b0010,p1);
alu u2(mymem[op[3:2]],1,4'b0011,p2);
wire k;//?
assign k=pp[7]+pp[6]+pp[5]+pp[4]+pp[3]+pp[2]+pp[1]+pp[0];
always@(negedge clk1)//下降沿，电平从高到低跳变
begin
case(op[7:4])//?
    4'b1111:PF=0;
    4'b1000:PF=0;
    4'b1011:PF=0;
    4'b1001:PF=0;
    4'b1010:PF=0;
    default:
    begin if(k%2==0)PF=1;else PF=0;end//奇偶
endcase
end
always@(negedge clk1)//下降沿，电平从高到低跳变
begin
case(op[7:4])
        4'b1111:begin ZF=0;CF=0;OF=0;SF=0;end
        4'b0010://0000//A+B
        begin 
            if(mymem[op[3:2]][7]==1&&mymem[op[1:0]][7]==1) CF=1;
            else if(mymem[op[3:2]][7]==0&&mymem[op[1:0]][7]==0) CF=0;
            else begin
            if(pp[7]==0) CF=1;
            else CF=0;end
            if(mymem[op[3:2]][7]==1&&mymem[op[1:0]][7]==1)
                if(pp[7]==0) OF=1;else OF=0;
            else if(mymem[op[3:2]][7]==0&&mymem[op[1:0]][7]==0)
                if(pp[7]==1) OF=1;else OF=0;
            else OF=0;
            if(pp==0) ZF=1;else ZF=0;
            SF=pp[7];
        end
       /* 4'b0001:
        begin 
            if(mymem[op[3:2]][7]==1&&pp[7]==0) CF=1;
            else CF=0;
            if(mymem[op[3:2]][7]==0&&pp[7]==1) OF=1;else OF=0;
            if(pp==0) ZF=1;else ZF=0;
            SF=pp[7];
            end*/

        /*4'b0010:
        begin 
            if(p1[7]==1) CF=1;else CF=0;
            if(mymem[op[3:2]][7]==0&&mymem[op[1:0]][7]==1)
                if(pp[7]==1) OF=1;else OF=0;
            else if(mymem[op[3:2]][7]==1&&mymem[op[1:0]][7]==0)
                if(pp[7]==0) OF=1;else OF=0;
            else OF=0;
            if(pp==0) ZF=1;else ZF=0;
            SF=pp[7];
            end*/
        4'b0110://0011//A-B
        begin 
            if(p2[7]==0) CF=0;else CF=1;
            if(mymem[op[3:2]][7]==1&&pp[7]==0) OF=1;else OF=0;
            if(pp==0) ZF=1;else ZF=0;
            SF=pp[7];
        end
        4'b1110://1100//*B
        begin 
        if(pp==0) ZF=1;else ZF=0;
        SF=pp[7];
        CF=0;OF=0;
        end
        4'b0000:begin //0100//A&B
        if(pp==0) ZF=1;else ZF=0;
        SF=pp[7];
        CF=0;OF=0;
        end
        4'b0001:begin //0101//A|B
        if(pp==0) ZF=1;else ZF=0;
        CF=0;OF=0;
        SF=pp[7];
        end
       /* 4'b0110:begin 
        if(pp==0) ZF=1;else ZF=0;
        SF=pp[7];
        CF=0;OF=0;
        end*/
        /*4'b0111:
        begin 
        if(pp==0) ZF=1;else ZF=0;
        CF=0;OF=0;
        end
        default begin ZF=0;CF=0;OF=0;SF=0;end*/
    endcase
end
//加有符号数比较0111 有符号数比较
//1100 ~ (A | B)
//1101 ~(A & B)
always@(negedge clk1)
begin
    case(op[7:4])
        4'b1111:mymem[2'b10]<=mymem[op[1:0]];//
        4'b0000:mymem[2'b10]<=pp;
        4'b0001:mymem[2'b10]<=pp;
        4'b0010:mymem[2'b10]<=pp;
       // 4'b0011:mymem[2'b10]<=pp;
        4'b1100:mymem[2'b10]<=pp;
        //4'b0100:mymem[2'b10]<=pp;
       // 4'b0101:mymem[2'b10]<=pp;
        4'b0110:mymem[2'b10]<=pp;
        4'b1110:mymem[2'b10]<=pp;
      //  4'b1101:mymem[2'b10]<=pp;
        //4'b0111:mymem[2'b10]<=pp;//
        default;
    endcase
end
always@(posedge clk1)
case(op[7:6])
2'b10:n<=8'b0;
default n<=mymem[2'b10];
endcase
wire [7:0] abs;                     //存储 输入n的绝对值    
wire [7:0] flag={8{n[7]}};           //r_flag用于计算补码    
assign abs   = (n^flag)+flag[0];    //计算 输入n的绝对值

//8位2进制对应十进制至多3位 
wire [7:0] num [0:3];               //从0到3 -> 符号位，百位，十位，个位
assign num[0] = 4'ha+flag[0];       //计算符号位，0xa：正数,0xb:负数
assign num[1] = abs / 100 % 10;     //计算百位
assign num[2] = abs / 10 % 10;      //计算十位      
assign num[3] = abs % 10;           //计算个位

reg [1:0] id=2'b00;                //id从0至3->从左到右四个数码管
parameter CNT_MAX = 99999;//设定时钟计数上限。
reg [31:0] cnt_1ms;//计数
//用100MHz时钟从0到 99999计数即为1ms
always @ (posedge clk)//时钟上升沿
    if (cnt_1ms == CNT_MAX)
        cnt_1ms <= 1'b0;
    else
        cnt_1ms <= cnt_1ms+1'b1;  

//每1ms切换一次id
always@(posedge clk)
    if(cnt_1ms == CNT_MAX - 1'b1)
        id <= id+1'b1;

//选择灯
always @ (id)
    case(id)
        4'b0000: led_id = 8'b1111_0111;   //0
        4'b0001: led_id = 8'b1111_1011;   //1
        4'b0010: led_id = 8'b1111_1101;   //2
        4'b0011: led_id = 8'b1111_1110;   //3
        default: led_id = 8'b0000_0000;  //default to 0, should not happen
    endcase                
    
 //显示数字
 always @ (id)
    case(num[id])
        4'b0000: out_led = 7'b0000001;    //0
        4'b0001: out_led = 7'b1001111;    //1
        4'b0010: out_led = 7'b0010010;    //2
        4'b0011: out_led = 7'b0000110;    //3
        4'b0100: out_led = 7'b1001100;    //4
        4'b0101: out_led = 7'b0100100;    //5
        4'b0110: out_led = 7'b0100000;    //6
        4'b0111: out_led = 7'b0001111;    //7
        4'b1000: out_led = 7'b0000000;    //8
        4'b1001: out_led = 7'b0000100;    //9
        4'b1010: out_led = 7'b1111111;    //a->不显示
        4'b1011: out_led = 7'b1111110;    //b->显示
        default: out_led = 7'b1111111;    //default to 7'b1111111, should not happen
    endcase
endmodule